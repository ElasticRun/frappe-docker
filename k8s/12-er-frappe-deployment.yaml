apiVersion: apps/v1
kind: Deployment
metadata:
  name: er-frappe
spec:
  replicas: 1
  selector:
    matchLabels:
      app: er-frappe
  template:
    metadata:
      labels:
        app: er-frappe
    spec:
      # hostAliases:
      #   - ip: 10.61.0.4
      #     hostnames:
      #       - frappe.db.ntex.com
      containers:
      # Frappe Container
      - name: er-frappe-container
        image: localhost:32000/er-frappe10-base:dev
        imagePullPolicy: Always
        resources: {}
          # limits:
          #   memory: "256Mi"
          #   cpu: "100m"
        ports:
          - containerPort: 8000
          - containerPort: 9000
          - containerPort: 6787
        env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                key: db.host
                name: er-frappe-secrets
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                key: db.name
                name: er-frappe-secrets
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db.password
                name: er-frappe-secrets
          - name: ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin.password
                name: er-frappe-secrets
        stdin: true
        tty: true
        volumeMounts:
        - mountPath: /home/frappe/docker-bench/sites/site1.docker
          name: er-frappe-sites-vol
        - mountPath: /home/frappe/docker-bench/config/
          name: er-frappe-redis-config
        - mountPath: /home/frappe/docker-bench/logs
          name: er-frappe-logs-dir
      #Fluentd sidecar to publish logs from frappe onto ELK stack
      - name: fluentd
        image: dock.elasticrun.in/er-fluentd:dev
        imagePullPolicy: Always
        resources: {}
        ports:
          - containerPort: 24224
        volumeMounts:
        - mountPath: /fluentd/etc
          name: er-frappe-fluentd-config
        - mountPath: /fluentd/log
          name: er-frappe-logs-dir
      # Local redis cache in the pod
      - name: redis-cache-container
        image: redis:alpine
        command: ["redis-server","/etc/conf.d/redis_cache.conf"]
        resources: {}
          # limits:
          #   memory: "256Mi"
          #   cpu: "100m"
        ports:
          - containerPort: 13000
        volumeMounts:
        - mountPath: /etc/conf.d
          name: er-frappe-redis-cache-config
      # Local redis socket-io in the pod.
      - name: redis-socketio-container
        image: redis:alpine
        command: ["redis-server","/etc/conf.d/redis_socketio.conf"]
        resources: {}
          # limits:
          #   memory: "256Mi"
          #   cpu: "100m"
        ports:
          - containerPort: 12000
        volumeMounts:
        - mountPath: /etc/conf.d
          name: er-frappe-redis-socketio-config
      restartPolicy: Always
      volumes:
      - name: er-frappe-sites-vol
        persistentVolumeClaim:
          claimName: er-frappe-sites-pvc
      - name: er-frappe-redis-config
        configMap:
            name: er-frappe-redis-config
      - name : er-frappe-redis-cache-config
        configMap:
          name: er-frappe-redis-config
          items:
          - key: redis_cache.conf
            path: redis_cache.conf
      - name : er-frappe-redis-socketio-config
        configMap:
          name: er-frappe-redis-config
          items:
          - key: redis_socketio.conf
            path: redis_socketio.conf
      - name : er-frappe-fluentd-config
        configMap:
          name : er-frappe-fluentd-config
          items:
          - key : fluent.conf
            path: fluent.conf
      - name : er-frappe-logs-dir
        emptyDir: {}
